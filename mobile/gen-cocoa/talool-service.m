/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"


#import "talool-service.h"

@implementation ServiceException

- (id) init
{
  return [super initWithName: @"ServiceException" reason: @"unknown" userInfo: nil];
}

- (id) initWithErrorCode: (int32_t) errorCode errorDesc: (NSString *) errorDesc
{
  self = [self init];
  __errorCode = errorCode;
  __errorCode_isset = YES;
  __errorDesc = [errorDesc retain_stub];
  __errorDesc_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super initWithCoder: decoder];
  if ([decoder containsValueForKey: @"errorCode"])
  {
    __errorCode = [decoder decodeInt32ForKey: @"errorCode"];
    __errorCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"errorDesc"])
  {
    __errorDesc = [[decoder decodeObjectForKey: @"errorDesc"] retain_stub];
    __errorDesc_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  [super encodeWithCoder: encoder];
  if (__errorCode_isset)
  {
    [encoder encodeInt32: __errorCode forKey: @"errorCode"];
  }
  if (__errorDesc_isset)
  {
    [encoder encodeObject: __errorDesc forKey: @"errorDesc"];
  }
}

- (void) dealloc
{
  [__errorDesc release_stub];
  [super dealloc_stub];
}

- (int32_t) errorCode {
  return __errorCode;
}

- (void) setErrorCode: (int32_t) errorCode {
  __errorCode = errorCode;
  __errorCode_isset = YES;
}

- (BOOL) errorCodeIsSet {
  return __errorCode_isset;
}

- (void) unsetErrorCode {
  __errorCode_isset = NO;
}

- (NSString *) errorDesc {
  return [[__errorDesc retain_stub] autorelease_stub];
}

- (void) setErrorDesc: (NSString *) errorDesc {
  [errorDesc retain_stub];
  [__errorDesc release_stub];
  __errorDesc = errorDesc;
  __errorDesc_isset = YES;
}

- (BOOL) errorDescIsSet {
  return __errorDesc_isset;
}

- (void) unsetErrorDesc {
  [__errorDesc release_stub];
  __errorDesc = nil;
  __errorDesc_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setErrorCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setErrorDesc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ServiceException"];
  if (__errorCode_isset) {
    [outProtocol writeFieldBeginWithName: @"errorCode" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __errorCode];
    [outProtocol writeFieldEnd];
  }
  if (__errorDesc_isset) {
    if (__errorDesc != nil) {
      [outProtocol writeFieldBeginWithName: @"errorDesc" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __errorDesc];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ServiceException("];
  [ms appendString: @"errorCode:"];
  [ms appendFormat: @"%i", __errorCode];
  [ms appendString: @",errorDesc:"];
  [ms appendFormat: @"\"%@\"", __errorDesc];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Merchant

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithName: (NSString *) name email: (NSString *) email
{
  self = [super init];
  __name = [name retain_stub];
  __name_isset = YES;
  __email = [email retain_stub];
  __email_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"email"])
  {
    __email = [[decoder decodeObjectForKey: @"email"] retain_stub];
    __email_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__email_isset)
  {
    [encoder encodeObject: __email forKey: @"email"];
  }
}

- (void) dealloc
{
  [__name release_stub];
  [__email release_stub];
  [super dealloc_stub];
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) email {
  return [[__email retain_stub] autorelease_stub];
}

- (void) setEmail: (NSString *) email {
  [email retain_stub];
  [__email release_stub];
  __email = email;
  __email_isset = YES;
}

- (BOOL) emailIsSet {
  return __email_isset;
}

- (void) unsetEmail {
  [__email release_stub];
  __email = nil;
  __email_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Merchant"];
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__email_isset) {
    if (__email != nil) {
      [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __email];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Merchant("];
  [ms appendString: @"name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",email:"];
  [ms appendFormat: @"\"%@\"", __email];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Address

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAddressId: (int64_t) addressId address1: (NSString *) address1 address2: (NSString *) address2 city: (NSString *) city stateProvinceCounty: (NSString *) stateProvinceCounty zip: (NSString *) zip country: (NSString *) country created: (Timestamp) created updated: (Timestamp) updated
{
  self = [super init];
  __addressId = addressId;
  __addressId_isset = YES;
  __address1 = [address1 retain_stub];
  __address1_isset = YES;
  __address2 = [address2 retain_stub];
  __address2_isset = YES;
  __city = [city retain_stub];
  __city_isset = YES;
  __stateProvinceCounty = [stateProvinceCounty retain_stub];
  __stateProvinceCounty_isset = YES;
  __zip = [zip retain_stub];
  __zip_isset = YES;
  __country = [country retain_stub];
  __country_isset = YES;
  __created = created;
  __created_isset = YES;
  __updated = updated;
  __updated_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"addressId"])
  {
    __addressId = [decoder decodeInt64ForKey: @"addressId"];
    __addressId_isset = YES;
  }
  if ([decoder containsValueForKey: @"address1"])
  {
    __address1 = [[decoder decodeObjectForKey: @"address1"] retain_stub];
    __address1_isset = YES;
  }
  if ([decoder containsValueForKey: @"address2"])
  {
    __address2 = [[decoder decodeObjectForKey: @"address2"] retain_stub];
    __address2_isset = YES;
  }
  if ([decoder containsValueForKey: @"city"])
  {
    __city = [[decoder decodeObjectForKey: @"city"] retain_stub];
    __city_isset = YES;
  }
  if ([decoder containsValueForKey: @"stateProvinceCounty"])
  {
    __stateProvinceCounty = [[decoder decodeObjectForKey: @"stateProvinceCounty"] retain_stub];
    __stateProvinceCounty_isset = YES;
  }
  if ([decoder containsValueForKey: @"zip"])
  {
    __zip = [[decoder decodeObjectForKey: @"zip"] retain_stub];
    __zip_isset = YES;
  }
  if ([decoder containsValueForKey: @"country"])
  {
    __country = [[decoder decodeObjectForKey: @"country"] retain_stub];
    __country_isset = YES;
  }
  if ([decoder containsValueForKey: @"created"])
  {
    __created = [decoder decodeInt64ForKey: @"created"];
    __created_isset = YES;
  }
  if ([decoder containsValueForKey: @"updated"])
  {
    __updated = [decoder decodeInt64ForKey: @"updated"];
    __updated_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__addressId_isset)
  {
    [encoder encodeInt64: __addressId forKey: @"addressId"];
  }
  if (__address1_isset)
  {
    [encoder encodeObject: __address1 forKey: @"address1"];
  }
  if (__address2_isset)
  {
    [encoder encodeObject: __address2 forKey: @"address2"];
  }
  if (__city_isset)
  {
    [encoder encodeObject: __city forKey: @"city"];
  }
  if (__stateProvinceCounty_isset)
  {
    [encoder encodeObject: __stateProvinceCounty forKey: @"stateProvinceCounty"];
  }
  if (__zip_isset)
  {
    [encoder encodeObject: __zip forKey: @"zip"];
  }
  if (__country_isset)
  {
    [encoder encodeObject: __country forKey: @"country"];
  }
  if (__created_isset)
  {
    [encoder encodeInt64: __created forKey: @"created"];
  }
  if (__updated_isset)
  {
    [encoder encodeInt64: __updated forKey: @"updated"];
  }
}

- (void) dealloc
{
  [__address1 release_stub];
  [__address2 release_stub];
  [__city release_stub];
  [__stateProvinceCounty release_stub];
  [__zip release_stub];
  [__country release_stub];
  [super dealloc_stub];
}

- (int64_t) addressId {
  return __addressId;
}

- (void) setAddressId: (int64_t) addressId {
  __addressId = addressId;
  __addressId_isset = YES;
}

- (BOOL) addressIdIsSet {
  return __addressId_isset;
}

- (void) unsetAddressId {
  __addressId_isset = NO;
}

- (NSString *) address1 {
  return [[__address1 retain_stub] autorelease_stub];
}

- (void) setAddress1: (NSString *) address1 {
  [address1 retain_stub];
  [__address1 release_stub];
  __address1 = address1;
  __address1_isset = YES;
}

- (BOOL) address1IsSet {
  return __address1_isset;
}

- (void) unsetAddress1 {
  [__address1 release_stub];
  __address1 = nil;
  __address1_isset = NO;
}

- (NSString *) address2 {
  return [[__address2 retain_stub] autorelease_stub];
}

- (void) setAddress2: (NSString *) address2 {
  [address2 retain_stub];
  [__address2 release_stub];
  __address2 = address2;
  __address2_isset = YES;
}

- (BOOL) address2IsSet {
  return __address2_isset;
}

- (void) unsetAddress2 {
  [__address2 release_stub];
  __address2 = nil;
  __address2_isset = NO;
}

- (NSString *) city {
  return [[__city retain_stub] autorelease_stub];
}

- (void) setCity: (NSString *) city {
  [city retain_stub];
  [__city release_stub];
  __city = city;
  __city_isset = YES;
}

- (BOOL) cityIsSet {
  return __city_isset;
}

- (void) unsetCity {
  [__city release_stub];
  __city = nil;
  __city_isset = NO;
}

- (NSString *) stateProvinceCounty {
  return [[__stateProvinceCounty retain_stub] autorelease_stub];
}

- (void) setStateProvinceCounty: (NSString *) stateProvinceCounty {
  [stateProvinceCounty retain_stub];
  [__stateProvinceCounty release_stub];
  __stateProvinceCounty = stateProvinceCounty;
  __stateProvinceCounty_isset = YES;
}

- (BOOL) stateProvinceCountyIsSet {
  return __stateProvinceCounty_isset;
}

- (void) unsetStateProvinceCounty {
  [__stateProvinceCounty release_stub];
  __stateProvinceCounty = nil;
  __stateProvinceCounty_isset = NO;
}

- (NSString *) zip {
  return [[__zip retain_stub] autorelease_stub];
}

- (void) setZip: (NSString *) zip {
  [zip retain_stub];
  [__zip release_stub];
  __zip = zip;
  __zip_isset = YES;
}

- (BOOL) zipIsSet {
  return __zip_isset;
}

- (void) unsetZip {
  [__zip release_stub];
  __zip = nil;
  __zip_isset = NO;
}

- (NSString *) country {
  return [[__country retain_stub] autorelease_stub];
}

- (void) setCountry: (NSString *) country {
  [country retain_stub];
  [__country release_stub];
  __country = country;
  __country_isset = YES;
}

- (BOOL) countryIsSet {
  return __country_isset;
}

- (void) unsetCountry {
  [__country release_stub];
  __country = nil;
  __country_isset = NO;
}

- (int64_t) created {
  return __created;
}

- (void) setCreated: (int64_t) created {
  __created = created;
  __created_isset = YES;
}

- (BOOL) createdIsSet {
  return __created_isset;
}

- (void) unsetCreated {
  __created_isset = NO;
}

- (int64_t) updated {
  return __updated;
}

- (void) setUpdated: (int64_t) updated {
  __updated = updated;
  __updated_isset = YES;
}

- (BOOL) updatedIsSet {
  return __updated_isset;
}

- (void) unsetUpdated {
  __updated_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setAddressId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAddress1: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAddress2: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCity: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStateProvinceCounty: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setZip: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCountry: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCreated: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUpdated: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Address"];
  if (__addressId_isset) {
    [outProtocol writeFieldBeginWithName: @"addressId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __addressId];
    [outProtocol writeFieldEnd];
  }
  if (__address1_isset) {
    if (__address1 != nil) {
      [outProtocol writeFieldBeginWithName: @"address1" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __address1];
      [outProtocol writeFieldEnd];
    }
  }
  if (__address2_isset) {
    if (__address2 != nil) {
      [outProtocol writeFieldBeginWithName: @"address2" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __address2];
      [outProtocol writeFieldEnd];
    }
  }
  if (__city_isset) {
    if (__city != nil) {
      [outProtocol writeFieldBeginWithName: @"city" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __city];
      [outProtocol writeFieldEnd];
    }
  }
  if (__stateProvinceCounty_isset) {
    if (__stateProvinceCounty != nil) {
      [outProtocol writeFieldBeginWithName: @"stateProvinceCounty" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __stateProvinceCounty];
      [outProtocol writeFieldEnd];
    }
  }
  if (__zip_isset) {
    if (__zip != nil) {
      [outProtocol writeFieldBeginWithName: @"zip" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __zip];
      [outProtocol writeFieldEnd];
    }
  }
  if (__country_isset) {
    if (__country != nil) {
      [outProtocol writeFieldBeginWithName: @"country" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __country];
      [outProtocol writeFieldEnd];
    }
  }
  if (__created_isset) {
    [outProtocol writeFieldBeginWithName: @"created" type: TType_I64 fieldID: 8];
    [outProtocol writeI64: __created];
    [outProtocol writeFieldEnd];
  }
  if (__updated_isset) {
    [outProtocol writeFieldBeginWithName: @"updated" type: TType_I64 fieldID: 9];
    [outProtocol writeI64: __updated];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Address("];
  [ms appendString: @"addressId:"];
  [ms appendFormat: @"%qi", __addressId];
  [ms appendString: @",address1:"];
  [ms appendFormat: @"\"%@\"", __address1];
  [ms appendString: @",address2:"];
  [ms appendFormat: @"\"%@\"", __address2];
  [ms appendString: @",city:"];
  [ms appendFormat: @"\"%@\"", __city];
  [ms appendString: @",stateProvinceCounty:"];
  [ms appendFormat: @"\"%@\"", __stateProvinceCounty];
  [ms appendString: @",zip:"];
  [ms appendFormat: @"\"%@\"", __zip];
  [ms appendString: @",country:"];
  [ms appendFormat: @"\"%@\"", __country];
  [ms appendString: @",created:"];
  [ms appendFormat: @"%qi", __created];
  [ms appendString: @",updated:"];
  [ms appendFormat: @"%qi", __updated];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Customer

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCustomerId: (int64_t) customerId firstName: (NSString *) firstName lastName: (NSString *) lastName email: (NSString *) email password: (NSString *) password address: (Address *) address created: (Timestamp) created updated: (Timestamp) updated
{
  self = [super init];
  __customerId = customerId;
  __customerId_isset = YES;
  __firstName = [firstName retain_stub];
  __firstName_isset = YES;
  __lastName = [lastName retain_stub];
  __lastName_isset = YES;
  __email = [email retain_stub];
  __email_isset = YES;
  __password = [password retain_stub];
  __password_isset = YES;
  __address = [address retain_stub];
  __address_isset = YES;
  __created = created;
  __created_isset = YES;
  __updated = updated;
  __updated_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"customerId"])
  {
    __customerId = [decoder decodeInt64ForKey: @"customerId"];
    __customerId_isset = YES;
  }
  if ([decoder containsValueForKey: @"firstName"])
  {
    __firstName = [[decoder decodeObjectForKey: @"firstName"] retain_stub];
    __firstName_isset = YES;
  }
  if ([decoder containsValueForKey: @"lastName"])
  {
    __lastName = [[decoder decodeObjectForKey: @"lastName"] retain_stub];
    __lastName_isset = YES;
  }
  if ([decoder containsValueForKey: @"email"])
  {
    __email = [[decoder decodeObjectForKey: @"email"] retain_stub];
    __email_isset = YES;
  }
  if ([decoder containsValueForKey: @"password"])
  {
    __password = [[decoder decodeObjectForKey: @"password"] retain_stub];
    __password_isset = YES;
  }
  if ([decoder containsValueForKey: @"address"])
  {
    __address = [[decoder decodeObjectForKey: @"address"] retain_stub];
    __address_isset = YES;
  }
  if ([decoder containsValueForKey: @"created"])
  {
    __created = [decoder decodeInt64ForKey: @"created"];
    __created_isset = YES;
  }
  if ([decoder containsValueForKey: @"updated"])
  {
    __updated = [decoder decodeInt64ForKey: @"updated"];
    __updated_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__customerId_isset)
  {
    [encoder encodeInt64: __customerId forKey: @"customerId"];
  }
  if (__firstName_isset)
  {
    [encoder encodeObject: __firstName forKey: @"firstName"];
  }
  if (__lastName_isset)
  {
    [encoder encodeObject: __lastName forKey: @"lastName"];
  }
  if (__email_isset)
  {
    [encoder encodeObject: __email forKey: @"email"];
  }
  if (__password_isset)
  {
    [encoder encodeObject: __password forKey: @"password"];
  }
  if (__address_isset)
  {
    [encoder encodeObject: __address forKey: @"address"];
  }
  if (__created_isset)
  {
    [encoder encodeInt64: __created forKey: @"created"];
  }
  if (__updated_isset)
  {
    [encoder encodeInt64: __updated forKey: @"updated"];
  }
}

- (void) dealloc
{
  [__firstName release_stub];
  [__lastName release_stub];
  [__email release_stub];
  [__password release_stub];
  [__address release_stub];
  [super dealloc_stub];
}

- (int64_t) customerId {
  return __customerId;
}

- (void) setCustomerId: (int64_t) customerId {
  __customerId = customerId;
  __customerId_isset = YES;
}

- (BOOL) customerIdIsSet {
  return __customerId_isset;
}

- (void) unsetCustomerId {
  __customerId_isset = NO;
}

- (NSString *) firstName {
  return [[__firstName retain_stub] autorelease_stub];
}

- (void) setFirstName: (NSString *) firstName {
  [firstName retain_stub];
  [__firstName release_stub];
  __firstName = firstName;
  __firstName_isset = YES;
}

- (BOOL) firstNameIsSet {
  return __firstName_isset;
}

- (void) unsetFirstName {
  [__firstName release_stub];
  __firstName = nil;
  __firstName_isset = NO;
}

- (NSString *) lastName {
  return [[__lastName retain_stub] autorelease_stub];
}

- (void) setLastName: (NSString *) lastName {
  [lastName retain_stub];
  [__lastName release_stub];
  __lastName = lastName;
  __lastName_isset = YES;
}

- (BOOL) lastNameIsSet {
  return __lastName_isset;
}

- (void) unsetLastName {
  [__lastName release_stub];
  __lastName = nil;
  __lastName_isset = NO;
}

- (NSString *) email {
  return [[__email retain_stub] autorelease_stub];
}

- (void) setEmail: (NSString *) email {
  [email retain_stub];
  [__email release_stub];
  __email = email;
  __email_isset = YES;
}

- (BOOL) emailIsSet {
  return __email_isset;
}

- (void) unsetEmail {
  [__email release_stub];
  __email = nil;
  __email_isset = NO;
}

- (NSString *) password {
  return [[__password retain_stub] autorelease_stub];
}

- (void) setPassword: (NSString *) password {
  [password retain_stub];
  [__password release_stub];
  __password = password;
  __password_isset = YES;
}

- (BOOL) passwordIsSet {
  return __password_isset;
}

- (void) unsetPassword {
  [__password release_stub];
  __password = nil;
  __password_isset = NO;
}

- (Address *) address {
  return [[__address retain_stub] autorelease_stub];
}

- (void) setAddress: (Address *) address {
  [address retain_stub];
  [__address release_stub];
  __address = address;
  __address_isset = YES;
}

- (BOOL) addressIsSet {
  return __address_isset;
}

- (void) unsetAddress {
  [__address release_stub];
  __address = nil;
  __address_isset = NO;
}

- (int64_t) created {
  return __created;
}

- (void) setCreated: (int64_t) created {
  __created = created;
  __created_isset = YES;
}

- (BOOL) createdIsSet {
  return __created_isset;
}

- (void) unsetCreated {
  __created_isset = NO;
}

- (int64_t) updated {
  return __updated;
}

- (void) setUpdated: (int64_t) updated {
  __updated = updated;
  __updated_isset = YES;
}

- (BOOL) updatedIsSet {
  return __updated_isset;
}

- (void) unsetUpdated {
  __updated_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCustomerId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFirstName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLastName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRUCT) {
          Address *fieldValue = [[Address alloc] init];
          [fieldValue read: inProtocol];
          [self setAddress: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCreated: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUpdated: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Customer"];
  if (__customerId_isset) {
    [outProtocol writeFieldBeginWithName: @"customerId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __customerId];
    [outProtocol writeFieldEnd];
  }
  if (__firstName_isset) {
    if (__firstName != nil) {
      [outProtocol writeFieldBeginWithName: @"firstName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __firstName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__lastName_isset) {
    if (__lastName != nil) {
      [outProtocol writeFieldBeginWithName: @"lastName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __lastName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__email_isset) {
    if (__email != nil) {
      [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __email];
      [outProtocol writeFieldEnd];
    }
  }
  if (__password_isset) {
    if (__password != nil) {
      [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __password];
      [outProtocol writeFieldEnd];
    }
  }
  if (__address_isset) {
    if (__address != nil) {
      [outProtocol writeFieldBeginWithName: @"address" type: TType_STRUCT fieldID: 6];
      [__address write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__created_isset) {
    [outProtocol writeFieldBeginWithName: @"created" type: TType_I64 fieldID: 7];
    [outProtocol writeI64: __created];
    [outProtocol writeFieldEnd];
  }
  if (__updated_isset) {
    [outProtocol writeFieldBeginWithName: @"updated" type: TType_I64 fieldID: 8];
    [outProtocol writeI64: __updated];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Customer("];
  [ms appendString: @"customerId:"];
  [ms appendFormat: @"%qi", __customerId];
  [ms appendString: @",firstName:"];
  [ms appendFormat: @"\"%@\"", __firstName];
  [ms appendString: @",lastName:"];
  [ms appendFormat: @"\"%@\"", __lastName];
  [ms appendString: @",email:"];
  [ms appendFormat: @"\"%@\"", __email];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", __password];
  [ms appendString: @",address:"];
  [ms appendFormat: @"%@", __address];
  [ms appendString: @",created:"];
  [ms appendFormat: @"%qi", __created];
  [ms appendString: @",updated:"];
  [ms appendFormat: @"%qi", __updated];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end




@interface registerCustomer_args : NSObject <NSCoding> {
  Customer * __customer;
  NSString * __password;

  BOOL __customer_isset;
  BOOL __password_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=customer, setter=setCustomer:) Customer * customer;
@property (nonatomic, retain, getter=password, setter=setPassword:) NSString * password;
#endif

- (id) init;
- (id) initWithCustomer: (Customer *) customer password: (NSString *) password;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (Customer *) customer;
- (void) setCustomer: (Customer *) customer;
#endif
- (BOOL) customerIsSet;

#if !__has_feature(objc_arc)
- (NSString *) password;
- (void) setPassword: (NSString *) password;
#endif
- (BOOL) passwordIsSet;

@end

@implementation registerCustomer_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCustomer: (Customer *) customer password: (NSString *) password
{
  self = [super init];
  __customer = [customer retain_stub];
  __customer_isset = YES;
  __password = [password retain_stub];
  __password_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"customer"])
  {
    __customer = [[decoder decodeObjectForKey: @"customer"] retain_stub];
    __customer_isset = YES;
  }
  if ([decoder containsValueForKey: @"password"])
  {
    __password = [[decoder decodeObjectForKey: @"password"] retain_stub];
    __password_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__customer_isset)
  {
    [encoder encodeObject: __customer forKey: @"customer"];
  }
  if (__password_isset)
  {
    [encoder encodeObject: __password forKey: @"password"];
  }
}

- (void) dealloc
{
  [__customer release_stub];
  [__password release_stub];
  [super dealloc_stub];
}

- (Customer *) customer {
  return [[__customer retain_stub] autorelease_stub];
}

- (void) setCustomer: (Customer *) customer {
  [customer retain_stub];
  [__customer release_stub];
  __customer = customer;
  __customer_isset = YES;
}

- (BOOL) customerIsSet {
  return __customer_isset;
}

- (void) unsetCustomer {
  [__customer release_stub];
  __customer = nil;
  __customer_isset = NO;
}

- (NSString *) password {
  return [[__password retain_stub] autorelease_stub];
}

- (void) setPassword: (NSString *) password {
  [password retain_stub];
  [__password release_stub];
  __password = password;
  __password_isset = YES;
}

- (BOOL) passwordIsSet {
  return __password_isset;
}

- (void) unsetPassword {
  [__password release_stub];
  __password = nil;
  __password_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Customer *fieldValue = [[Customer alloc] init];
          [fieldValue read: inProtocol];
          [self setCustomer: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"registerCustomer_args"];
  if (__customer_isset) {
    if (__customer != nil) {
      [outProtocol writeFieldBeginWithName: @"customer" type: TType_STRUCT fieldID: 1];
      [__customer write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__password_isset) {
    if (__password != nil) {
      [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __password];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"registerCustomer_args("];
  [ms appendString: @"customer:"];
  [ms appendFormat: @"%@", __customer];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", __password];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RegisterCustomer_result : NSObject <NSCoding> {
  ServiceException * __error;

  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=error, setter=setError:) ServiceException * error;
#endif

- (id) init;
- (id) initWithError: (ServiceException *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (ServiceException *) error;
- (void) setError: (ServiceException *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation RegisterCustomer_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithError: (ServiceException *) error
{
  self = [super init];
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__error release_stub];
  [super dealloc_stub];
}

- (ServiceException *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (ServiceException *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceException *fieldValue = [[ServiceException alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegisterCustomer_result"];

  if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RegisterCustomer_result("];
  [ms appendString: @"error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TaloolServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_registerCustomer: (Customer *) customer password: (NSString *) password
{
  [outProtocol writeMessageBeginWithName: @"registerCustomer" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"registerCustomer_args"];
  if (customer != nil)  {
    [outProtocol writeFieldBeginWithName: @"customer" type: TType_STRUCT fieldID: 1];
    [customer write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (password != nil)  {
    [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 2];
    [outProtocol writeString: password];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_registerCustomer
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  RegisterCustomer_result * result = [[[RegisterCustomer_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result errorIsSet]) {
    @throw [result error];
  }
  return;
}

- (void) registerCustomer: (Customer *) customer password: (NSString *) password
{
  [self send_registerCustomer : customer password: password];
  [self recv_registerCustomer];
}

@end

@implementation TaloolServiceProcessor

- (id) initWithTaloolService: (id <TaloolService>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_registerCustomer_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"registerCustomer"];
  }
  return self;
}

- (id<TaloolService>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_registerCustomer_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  registerCustomer_args * args = [[registerCustomer_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  RegisterCustomer_result * result = [[RegisterCustomer_result alloc] init];
  [mService registerCustomer: [args customer] password: [args password]];
  [outProtocol writeMessageBeginWithName: @"registerCustomer"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

